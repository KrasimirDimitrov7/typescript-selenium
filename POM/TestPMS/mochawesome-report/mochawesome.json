{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2020-12-13T01:52:50.640Z",
    "end": "2020-12-13T01:53:10.500Z",
    "duration": 19860,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a7533be7-4a40-4fca-8a2a-733be0ace620",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5825b265-362a-416d-a6d1-ce08d2927c3e",
          "title": "Testing Login page",
          "fullFile": "C:\\Users\\krasi\\Desktop\\TestLoginPMS_TS\\TestLoginPMS\\src\\test\\test.ts",
          "file": "\\src\\test\\test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Login page\"",
              "fullTitle": "Testing Login page \"before each\" hook in \"Testing Login page\"",
              "timedOut": false,
              "duration": 5937,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                driver = new webdriver.Builder().withCapabilities(webdriver.Capabilities.chrome()).build();\n                //new webdriver.Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().headless()).build();\n                return [4 /*yield*/, driver.get(\"http://localhost:4200/\")];\n            case 1:\n                //new webdriver.Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().headless()).build();\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n});",
              "err": {},
              "uuid": "929de8f4-33f2-4b0d-93a9-ed7b69802e68",
              "parentUUID": "5825b265-362a-416d-a6d1-ce08d2927c3e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Login page\"",
              "fullTitle": "Testing Login page \"after each\" hook in \"Testing Login page\"",
              "timedOut": false,
              "duration": 135,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function () {\n    var imageFileName, imageFilePath, _this;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (this.currentTest !== undefined) {\n                    if (this.currentTest.state !== \"passed\") {\n                        imageFileName = new Date().valueOf() + \".jpeg\";\n                        imageFilePath = pathOfScreenshotFolder() + \"\\\\\" + imageFileName;\n                        _this = this;\n                        captureScreenshot(imageFilePath);\n                        addContext(_this, imageFilePath);\n                    }\n                }\n                //await driver.sleep(4000);\n                return [4 /*yield*/, driver.quit()];\n            case 1:\n                //await driver.sleep(4000);\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n});",
              "err": {},
              "uuid": "b88b71ec-fcac-4381-b152-8f2421bff7c6",
              "parentUUID": "5825b265-362a-416d-a6d1-ce08d2927c3e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Slick button 1 and the attached text",
              "fullTitle": "Testing Login page Slick button 1 and the attached text",
              "timedOut": false,
              "duration": 3735,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "\"C:\\\\Users\\\\krasi\\\\Desktop\\\\TestLoginPMS_TS\\\\TestLoginPMS\\\\src\\\\screenshots\\\\1607824380318.jpeg\"",
              "code": "return __awaiter(this, void 0, void 0, function () {\n    var slickButton;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, driver.wait(selenium_webdriver_1.until.elementLocated(selenium_webdriver_1.By.css('button#slick-slide-control00')), 4000)];\n            case 1:\n                slickButton = _a.sent();\n                return [4 /*yield*/, driver.sleep(3500)];\n            case 2:\n                _a.sent();\n                return [4 /*yield*/, slickButton.click()];\n            case 3:\n                _a.sent();\n                return [4 /*yield*/, driver.findElement(selenium_webdriver_1.By.xpath(\"//*[@id='slick-slide00']/h2\")).getText().then(function (txt) {\n                        console.log(txt);\n                        chai_1.expect(txt).to.equal(\"1Trade Repositories\");\n                    })];\n            case 4:\n                _a.sent();\n                return [4 /*yield*/, driver.findElement(selenium_webdriver_1.By.xpath(\"//*[@id='slick-slide00']/p\")).getText().then(function (txt2) {\n                        console.log(txt2);\n                        chai_1.expect(txt2).to.equal(\"1Use the PMS EMIR REGIS-TR to create reports of derivatives trades as required by EMIR and the PMS EMIR REGIS-TR interface to submit them.\");\n                    })];\n            case 5:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n});",
              "err": {
                "message": "AssertionError: expected 'Trade Repositories' to equal '1Trade Repositories'",
                "estack": "AssertionError: expected 'Trade Repositories' to equal '1Trade Repositories'\n    at C:\\Users\\krasi\\Desktop\\TestLoginPMS_TS\\TestLoginPMS\\src\\test\\test.ts:224:22\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "diff": "- Trade Repositories\n+ 1Trade Repositories\n"
              },
              "uuid": "19e2631f-b0d4-497c-807f-dfffc05e1e41",
              "parentUUID": "5825b265-362a-416d-a6d1-ce08d2927c3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Slick button 2 and the attached text",
              "fullTitle": "Testing Login page Slick button 2 and the attached text",
              "timedOut": false,
              "duration": 3673,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function () {\n    var slickButton;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, driver.wait(selenium_webdriver_1.until.elementLocated(selenium_webdriver_1.By.css('button#slick-slide-control01')), 4000)];\n            case 1:\n                slickButton = _a.sent();\n                return [4 /*yield*/, driver.sleep(3500)];\n            case 2:\n                _a.sent();\n                return [4 /*yield*/, slickButton.click()];\n            case 3:\n                _a.sent();\n                return [4 /*yield*/, driver.findElement(selenium_webdriver_1.By.xpath(\"//*[@id='slick-slide01']/h2\")).getText().then(function (txt) {\n                        console.log(txt);\n                        chai_1.expect(txt).to.equal(\"Reverse Stress Testing\");\n                        driver.findElement(selenium_webdriver_1.By.xpath(\"//*[@id='slick-slide01']/p\")).getText().then(function (txt2) {\n                            console.log(txt2);\n                            chai_1.expect(txt2).to.equal(\"PMS offers a pragmatic module for reverse stress testing.\");\n                        });\n                    })];\n            case 4:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n});",
              "err": {},
              "uuid": "87e9b57f-91a6-48e0-87d8-3b0f5d79916d",
              "parentUUID": "5825b265-362a-416d-a6d1-ce08d2927c3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87e9b57f-91a6-48e0-87d8-3b0f5d79916d"
          ],
          "failures": [
            "19e2631f-b0d4-497c-807f-dfffc05e1e41"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7408,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "": true
      },
      "version": "5.1.0"
    }
  }
}